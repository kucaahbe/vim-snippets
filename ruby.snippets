snippet #!
	#!/usr/bin/env ruby
	${1}

# language constructions
snippet re
	require '${1:lib}'${2}
snippet in
	include ${1:SomeModule}
snippet cl
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet mod
	module ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end
snippet def
	def ${1}
	end
snippet defi
	def initialize ${1:*args}
		${2:# code}
	end
snippet defs
	def self.${1:method} ${2:*args}
		${3:# code}
	end
snippet do
	do
		${1}
	end
snippet dov
	do |${1:var}|
		${2}
	end
snippet dl
	{ ${1} }
snippet dlv
	{ |${1:var}| ${2} }
snippet if
	if ${1}
	end
snippet ife
	if ${1}
	else
	end
snippet case
	case ${1:var}
	when ${2:value}
	end

# special variables:
snippet file
	__FILE__${1}
snippet line
	__LINE__${1}
snippet s
	self${1}
snippet n
	nil${1}
snippet t
	true
snippet f
	false

# often-used constructions:
snippet logi
	logger.info ${1}
snippet logw
	logger.warn ${1}
snippet logd
	logger.warn ${1}

# misc:
snippet i
	inspect
snippet #
	#{${1}}
snippet rpath
	File.expand_path( File.join(${1}), __FILE__ )
snippet times
	${1:10_000}.times ${2}
# benchmarks:
snippet report
	x.report do
		${1}
	end
snippet bm
	Benchmark.bm do |x|
		x.report("1") do
		end

		x.report("2") do
		end
	end
snippet bmbm
	Benchmark.bmbm do |x|
		x.report("1") do
		end

		x.report("2") do
		end
	end

# capybara-related
snippet sop
	save_and_open_page
