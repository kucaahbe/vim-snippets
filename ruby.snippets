snippet #! "#!/usr/bin/env ruby" b
#!/usr/bin/env ruby
endsnippet

# language constructions
snippet re "require 'library'"
require '${1:lib}'
endsnippet

snippet rr "require_relative '../library'"
require_relative '${1:lib}'
endsnippet

snippet in "include SomeModule"
include ${1:SomeModule}
endsnippet

snippet cl "class CurrentFileName"
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	$0
end
endsnippet

snippet cls "class <<self"
class <<self
	$0
end
endsnippet

snippet mod "module CurrentFileName"
module ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	$0
end
endsnippet

snippet def "def method .. end"
def $0
end
endsnippet

snippet defi "def initialize .. end"
def initialize$0
end
endsnippet

snippet defs "def self.method"
def self.$0
end
endsnippet

snippet do "do .. end"
do
	$0
end
endsnippet

snippet dov "do |var| .. end"
do |${1:var}|
	$0
end
endsnippet

snippet ret "return ..."
return $0
endsnippet

snippet -> "lambda block"
->(${1:params}) { $0 }
endsnippet

snippet {{ "{ |var| ... }" i
{ |${1:var}| $0 }
endsnippet

snippet if "if .. end"
if $0
end
endsnippet

snippet ife "if ... else ..."
if $0
else
end
endsnippet

snippet unl "unless"
unless $0
end
endsnippet

snippet unle "unless .. else .."
unless $0
else
end
endsnippet

snippet case "case"
case ${1:var}
when ${2:value}
else
	#code
end
endsnippet

snippet wh "when value"
when $0
endsnippet

# get curent line
#`!v strpart(getline("."),1,5)`
# get word before cursor
# if it presence insert it with s at end
snippet each ".each |var| .. end" i
each |${1:i}|
	$0
end
endsnippet

# special variables:
snippet file "__FILE__" i
__FILE__
endsnippet

snippet line "__LINE__" i
__LINE__
endsnippet

snippet s "s"
self
endsnippet

snippet n "n"
nil
endsnippet

snippet t "t"
true
endsnippet

snippet f "f"
false
endsnippet

# often-used constructions:
snippet tap "tap { |var| ... }" i
tap { |obj| ${1:p obj} }
endsnippet

snippet logi "logger.info ..."
logger.info $0
endsnippet

snippet logw "logger.warn ..."
logger.warn $0
endsnippet

snippet logd "logger.debug ..."
logger.debug { $0 }
endsnippet

# misc:
snippet ins "inspect" iw
inspect$0
endsnippet

snippet pin "pretty_inspect" i
pretty_inspect
endsnippet

snippet dbg "debug"
begin require 'debugger'; debugger; rescue LoadError; require 'debug'; end
endsnippet

snippet bb "byebug"
require 'byebug';byebug
endsnippet

snippet pry "binding.pry"
binding.pry
endsnippet

snippet rube "# rubocop:enable"
# rubocop:enable $0
endsnippet

snippet rubd "# rubocop:disable"
# rubocop:disable $0
endsnippet

snippet # "#" i
#{$0}
endsnippet

snippet rpath "File.expand_path( File.join(...), __FILE__ )" i
File.expand_path( File.join($0), __FILE__ )
endsnippet

snippet times "n.times ..."
${1:10_000}.times $0
endsnippet

snippet sl "sleep n"
sleep ${0:5}
endsnippet

# benchmarks:
snippet report "report"
x.report do
	${1}
end
endsnippet

snippet bm "bm"
require 'benchmark'

$0

COUNT=1_000

Benchmark.bm do |x|
	x.report '1' do
		COUNT.times do
		end
	end

	x.report '2' do
		COUNT.times do
		end
	end
end
endsnippet

snippet bmbm "bmbm"
require 'benchmark'

$0

COUNT=1_000

Benchmark.bmbm do |x|
	x.report '1' do
		COUNT.times do
		end
	end

	x.report '2' do
		COUNT.times do
		end
	end
end
endsnippet

# capybara-related
snippet sop "sop"
save_and_open_page
endsnippet

snippet sos "save_ad"
save_and_open_screenshot
endsnippet
