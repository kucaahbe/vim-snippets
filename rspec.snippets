snippet spec "spec file skeleton"
require '${1:rails}_helper'

RSpec.describe ${2:ClassName} do
	${0:pending('write some tests or delete '+__FILE__)}
end
endsnippet

snippet co "context"
context '$1' do
	$0
end
endsnippet

snippet de "describe"
describe '$1'${2:, :wip} do
	$0
end
endsnippet

snippet fe "feature"
feature '$1'${2:, :wip} do
	$0
end
endsnippet

snippet af "aggregate_failures"
aggregate_failures '$1' do
	$0
end
endsnippet

snippet she "shared_examples"
shared_examples '$1' do
	$0
end
endsnippet

snippet ie "include_examples"
include_examples '$0'
endsnippet

snippet ibl "it_behaves_like"
it_behaves_like '$0'
endsnippet

snippet isbl "it_should_behave_like"
it_should_behave_like '$0'
endsnippet

snippet ma "matching"
matching '$0'
endsnippet

snippet p "pending"
pending
endsnippet

snippet pe "pending('description')"
pending($0)
endsnippet

snippet it "it ... do"
it '$0' do
end
endsnippet

snippet xit "it ... do"
xit '$0' do
end
endsnippet

snippet xitl "xit '...'"
xit '$0'
endsnippet

snippet itl "it {...}"
it { $0 }
endsnippet

snippet itli "it { is_expected.to ... }"
it { is_expected.to $0 }
endsnippet

snippet itp "it (pending)"
it '$0'
endsnippet

snippet dc "described_class" i
described_class
endsnippet

snippet su "subject {}"
subject { $0 }
endsnippet

snippet sub "subject(:name) {}"
subject(:${1:named}) { $0 }
endsnippet

snippet sum "subject(:method) { smth.method(:some_method) }"
subject(:method) { ${1:described_class}.method(:${0:name}) }
endsnippet

snippet let "let(:name) {}"
let(:${1:variable}) { $0 }
endsnippet

snippet let! "let!(:name) {}"
let!(:${1:variable}) { $0 }
endsnippet

snippet ba "background {}"
background do
	$0
end
endsnippet

snippet sc "scenario {}"
scenario '$1' do
	$0
end
endsnippet

snippet exp "expect(...).to ..."
expect($1).to $0
endsnippet

snippet expe "expect {  }.to ..."
expect {
  $1
}.to $0
endsnippet

snippet allow "allow(...).to ..."
allow($1).to receive($0)
endsnippet

snippet rec "receive"
receive($0)
endsnippet

snippet rai "raise_error"
raise_error($0)
endsnippet

snippet chf "change{}.from().to()"
change { ${1:what?} }.from($2).to($0)
endsnippet

snippet chb "change{}.by()"
change{${1:what?}}.by($0)
endsnippet

snippet anyi "any_instance." i
any_instance.
endsnippet

snippet aco "and_call_original" i
and_call_original
endsnippet
