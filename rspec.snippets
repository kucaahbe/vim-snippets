snippet spec "spec file skeleton"
require 'spec_helper'

describe ${1:ClassName} do
	${2:pending('write some tests or delete '+__FILE__)}
end
endsnippet

snippet co "context"
context "$0" do
end
endsnippet

snippet de "describe"
describe "$0" do
end
endsnippet

snippet p "pending"
pending
endsnippet

snippet pe "pending('description')"
pending($0)
endsnippet

snippet it "it ... do"
it "$0" do
end
endsnippet

snippet xit "it ... do"
xit "$0" do
end
endsnippet

snippet itl "it {...}"
it { $0 }
endsnippet

snippet itp "it (pending)"
it "$0"
endsnippet

snippet dc "described_class" i
described_class
endsnippet

snippet su "subject(:name) {}"
subject(:${1:named}) { $0 }
endsnippet

snippet let "let(:name) {}"
let(:${1:variable}) { $0 }
endsnippet

# shoulds
snippet sh "should" i
should $0
endsnippet

snippet she "should eq" i
should eq($0)
endsnippet

snippet shr "should_receive" i
should_receive($0)
endsnippet

snippet shnr "should_not_receive" i
should_not_receive($0)
endsnippet

snippet exp "expect {  }.to ..."
expect { $1 }.to $0
endsnippet

snippet rai "raise_error"
raise_error($0)
endsnippet

snippet chf "change{}.from().to()"
change{${1:what?}}.from($2).to($0)
endsnippet

snippet chb "change{}.by()"
change{${1:what?}}.by($0)
endsnippet

snippet anyi "any_instance." i
any_instance.
endsnippet
