# CPP
# includes:
snippet inc "inc"
#include <${1:stdio}.h>${2}
endsnippet

snippet incl "incl"
#include "${1:header}.h"${2}
endsnippet

# defines:
snippet def "def"
#define ${1:MACRO} ${2:value}
endsnippet

snippet undef "undef"
#undef ${1:MACRO}
endsnippet

# conditional:
snippet ifdef "ifdef"
#ifdef ${1:MACRO}
${2}
#endif /* $1 */
endsnippet

snippet ifndef "ifndef"
#ifndef ${1:MACRO}
${2}
#endif /* $1 */
endsnippet

# C
snippet main "main"
${1:int} main(int argc, char *argv[])
{
	${2://code}
	return 0;
}
endsnippet

snippet { "{"
{
	${1://code}
}
endsnippet

snippet ret "ret"
return ${1:0};${2}
endsnippet

snippet for "for"
for (${1:i} = ${2:0}; $1 ${3:<} ${4:100500}; ${5:++$1})
{
	${6://code}
}
endsnippet

snippet while "while"
while (${1:condition})
{
	${2://code}
}
endsnippet

snippet ife "ife"
if (${1:cond})
{
	${2://code}
}
else
{
	// else code
}
endsnippet

snippet if "if"
if (${1:COND})
{
	${2://code}
}${3}
endsnippet

snippet elif "elif"
else if (${1:COND})
{
	${2://code}
}${3}
endsnippet

snippet else "else"
else
{
	${1://code}
}${2}
endsnippet

# types
snippet struct "struct"
struct ${1:Typename} {
	${2:// included types}
};
endsnippet

# functions
snippet p "p"
${1:fname}(${2:args});${3}
endsnippet

snippet f "f"
${1:fname}(${2:args})${3}
endsnippet

snippet fdef "fdef"
$3 $1($2);
${3:ftype} ${1:fname}(${2:args})
{
	${4://code}
}
endsnippet

snippet prf "prf"
printf("${1:str}"${2:,});${3}
endsnippet

snippet puts "puts"
puts("${1:str}");${2}
endsnippet

snippet size "size"
sizeof(${1:smth})
endsnippet

snippet a "a"
assert(${1:cond});${2}
endsnippet


